import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.1.3
 * Query Engine version: 363f5a521d6b06543e53d134652a0037a3096d41
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray


/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export declare type TrueKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string, collectTimestamps?: any): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends Array<LogLevel | LogDefinition>> = GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]> 

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Authors
 * const authors = await prisma.author.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://github.com/prisma/prisma/blob/master/docs/prisma-client-js/api.md).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = keyof T extends 'log' ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Authors
   * const authors = await prisma.author.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://github.com/prisma/prisma/blob/master/docs/prisma-client-js/api.md).
   */
  constructor(optionsArg?: T);
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  connect(): Promise<void>;
  /**
   * @private
   */
  private runDisconnect;
  /**
   * Disconnect from the database
   */
  disconnect(): Promise<any>;

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://github.com/prisma/prisma/blob/master/docs/prisma-client-js/api.md#raw-database-access).
  */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://github.com/prisma/prisma/blob/master/docs/prisma-client-js/api.md#raw-database-access).
  */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.author`: Exposes CRUD operations for the **author** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Authors
    * const authors = await prisma.author.findMany()
    * ```
    */
  get author(): authorDelegate;

  /**
   * `prisma.book`: Exposes CRUD operations for the **book** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Books
    * const books = await prisma.book.findMany()
    * ```
    */
  get book(): bookDelegate;

  /**
   * `prisma.register`: Exposes CRUD operations for the **register** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Registers
    * const registers = await prisma.register.findMany()
    * ```
    */
  get register(): registerDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const OrderByArg: {
  asc: 'asc',
  desc: 'desc'
};

export declare type OrderByArg = (typeof OrderByArg)[keyof typeof OrderByArg]


export declare const book_status: {
  AVAILABLE: 'AVAILABLE',
  ISSUED: 'ISSUED'
};

export declare type book_status = (typeof book_status)[keyof typeof book_status]



/**
 * Model author
 */

export type author = {
  id: number
  lastname: string | null
  name: string | null
}

export type authorSelect = {
  id?: boolean
  lastname?: boolean
  name?: boolean
  book?: boolean | FindManybookArgs
}

export type authorInclude = {
  book?: boolean | FindManybookArgs
}

export type authorGetPayload<
  S extends boolean | null | undefined | authorArgs,
  U = keyof S
> = S extends true
  ? author
  : S extends undefined
  ? never
  : S extends authorArgs | FindManyauthorArgs
  ? 'include' extends U
    ? author  & {
      [P in TrueKeys<S['include']>]:
      P extends 'book'
      ? Array<bookGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof author ? author[P]
: 
      P extends 'book'
      ? Array<bookGetPayload<S['select'][P]>> : never
    }
  : author
: author


export interface authorDelegate {
  /**
   * Find zero or one Author.
   * @param {FindOneauthorArgs} args - Arguments to find a Author
   * @example
   * // Get one Author
   * const author = await prisma.author.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneauthorArgs>(
    args: Subset<T, FindOneauthorArgs>
  ): CheckSelect<T, Prisma__authorClient<author | null>, Prisma__authorClient<authorGetPayload<T> | null>>
  /**
   * Find zero or more Authors.
   * @param {FindManyauthorArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Authors
   * const authors = await prisma.author.findMany()
   * 
   * // Get first 10 Authors
   * const authors = await prisma.author.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const authorWithIdOnly = await prisma.author.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyauthorArgs>(
    args?: Subset<T, FindManyauthorArgs>
  ): CheckSelect<T, Promise<Array<author>>, Promise<Array<authorGetPayload<T>>>>
  /**
   * Create a Author.
   * @param {authorCreateArgs} args - Arguments to create a Author.
   * @example
   * // Create one Author
   * const Author = await prisma.author.create({
   *   data: {
   *     // ... data to create a Author
   *   }
   * })
   * 
  **/
  create<T extends authorCreateArgs>(
    args: Subset<T, authorCreateArgs>
  ): CheckSelect<T, Prisma__authorClient<author>, Prisma__authorClient<authorGetPayload<T>>>
  /**
   * Delete a Author.
   * @param {authorDeleteArgs} args - Arguments to delete one Author.
   * @example
   * // Delete one Author
   * const Author = await prisma.author.delete({
   *   where: {
   *     // ... filter to delete one Author
   *   }
   * })
   * 
  **/
  delete<T extends authorDeleteArgs>(
    args: Subset<T, authorDeleteArgs>
  ): CheckSelect<T, Prisma__authorClient<author>, Prisma__authorClient<authorGetPayload<T>>>
  /**
   * Update one Author.
   * @param {authorUpdateArgs} args - Arguments to update one Author.
   * @example
   * // Update one Author
   * const author = await prisma.author.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends authorUpdateArgs>(
    args: Subset<T, authorUpdateArgs>
  ): CheckSelect<T, Prisma__authorClient<author>, Prisma__authorClient<authorGetPayload<T>>>
  /**
   * Delete zero or more Authors.
   * @param {authorDeleteManyArgs} args - Arguments to filter Authors to delete.
   * @example
   * // Delete a few Authors
   * const { count } = await prisma.author.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends authorDeleteManyArgs>(
    args: Subset<T, authorDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Authors.
   * @param {authorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Authors
   * const author = await prisma.author.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends authorUpdateManyArgs>(
    args: Subset<T, authorUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Author.
   * @param {authorUpsertArgs} args - Arguments to update or create a Author.
   * @example
   * // Update or create a Author
   * const author = await prisma.author.upsert({
   *   create: {
   *     // ... data to create a Author
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Author we want to update
   *   }
   * })
  **/
  upsert<T extends authorUpsertArgs>(
    args: Subset<T, authorUpsertArgs>
  ): CheckSelect<T, Prisma__authorClient<author>, Prisma__authorClient<authorGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManyauthorArgs, 'select' | 'include'>): Promise<number>
}

/**
 * The delegate class that acts as a "Promise-like" for author.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__authorClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  book<T extends FindManybookArgs = {}>(args?: Subset<T, FindManybookArgs>): CheckSelect<T, Promise<Array<book>>, Promise<Array<bookGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * author findOne
 */
export type FindOneauthorArgs = {
  /**
   * Select specific fields to fetch from the author
  **/
  select?: authorSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: authorInclude | null
  /**
   * Filter, which author to fetch.
  **/
  where: authorWhereUniqueInput
}


/**
 * author findMany
 */
export type FindManyauthorArgs = {
  /**
   * Select specific fields to fetch from the author
  **/
  select?: authorSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: authorInclude | null
  /**
   * Filter, which authors to fetch.
  **/
  where?: authorWhereInput
  /**
   * Determine the order of the authors to fetch.
  **/
  orderBy?: authorOrderByInput
  /**
   * Sets the position for listing authors.
  **/
  cursor?: authorWhereUniqueInput
  /**
   * The number of authors to fetch. If negative number, it will take authors before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` authors.
  **/
  skip?: number
}


/**
 * author create
 */
export type authorCreateArgs = {
  /**
   * Select specific fields to fetch from the author
  **/
  select?: authorSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: authorInclude | null
  /**
   * The data needed to create a author.
  **/
  data: authorCreateInput
}


/**
 * author update
 */
export type authorUpdateArgs = {
  /**
   * Select specific fields to fetch from the author
  **/
  select?: authorSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: authorInclude | null
  /**
   * The data needed to update a author.
  **/
  data: authorUpdateInput
  /**
   * Choose, which author to update.
  **/
  where: authorWhereUniqueInput
}


/**
 * author updateMany
 */
export type authorUpdateManyArgs = {
  data: authorUpdateManyMutationInput
  where?: authorWhereInput
}


/**
 * author upsert
 */
export type authorUpsertArgs = {
  /**
   * Select specific fields to fetch from the author
  **/
  select?: authorSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: authorInclude | null
  /**
   * The filter to search for the author to update in case it exists.
  **/
  where: authorWhereUniqueInput
  /**
   * In case the author found by the `where` argument doesn't exist, create a new author with this data.
  **/
  create: authorCreateInput
  /**
   * In case the author was found with the provided `where` argument, update it with this data.
  **/
  update: authorUpdateInput
}


/**
 * author delete
 */
export type authorDeleteArgs = {
  /**
   * Select specific fields to fetch from the author
  **/
  select?: authorSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: authorInclude | null
  /**
   * Filter which author to delete.
  **/
  where: authorWhereUniqueInput
}


/**
 * author deleteMany
 */
export type authorDeleteManyArgs = {
  where?: authorWhereInput
}


/**
 * author without action
 */
export type authorArgs = {
  /**
   * Select specific fields to fetch from the author
  **/
  select?: authorSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: authorInclude | null
}



/**
 * Model book
 */

export type book = {
  authorid: number
  bookid: string
  genre: string
  id: number
  isbn: string
  language: string
  name: string
  publisher: string
  status: book_status
  year: string
}

export type bookSelect = {
  authorid?: boolean
  bookid?: boolean
  genre?: boolean
  id?: boolean
  isbn?: boolean
  language?: boolean
  name?: boolean
  publisher?: boolean
  status?: boolean
  year?: boolean
  author?: boolean | authorArgs
  register?: boolean | FindManyregisterArgs
}

export type bookInclude = {
  author?: boolean | authorArgs
  register?: boolean | FindManyregisterArgs
}

export type bookGetPayload<
  S extends boolean | null | undefined | bookArgs,
  U = keyof S
> = S extends true
  ? book
  : S extends undefined
  ? never
  : S extends bookArgs | FindManybookArgs
  ? 'include' extends U
    ? book  & {
      [P in TrueKeys<S['include']>]:
      P extends 'author'
      ? authorGetPayload<S['include'][P]> :
      P extends 'register'
      ? Array<registerGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof book ? book[P]
: 
      P extends 'author'
      ? authorGetPayload<S['select'][P]> :
      P extends 'register'
      ? Array<registerGetPayload<S['select'][P]>> : never
    }
  : book
: book


export interface bookDelegate {
  /**
   * Find zero or one Book.
   * @param {FindOnebookArgs} args - Arguments to find a Book
   * @example
   * // Get one Book
   * const book = await prisma.book.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOnebookArgs>(
    args: Subset<T, FindOnebookArgs>
  ): CheckSelect<T, Prisma__bookClient<book | null>, Prisma__bookClient<bookGetPayload<T> | null>>
  /**
   * Find zero or more Books.
   * @param {FindManybookArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Books
   * const books = await prisma.book.findMany()
   * 
   * // Get first 10 Books
   * const books = await prisma.book.findMany({ take: 10 })
   * 
   * // Only select the `authorid`
   * const bookWithAuthoridOnly = await prisma.book.findMany({ select: { authorid: true } })
   * 
  **/
  findMany<T extends FindManybookArgs>(
    args?: Subset<T, FindManybookArgs>
  ): CheckSelect<T, Promise<Array<book>>, Promise<Array<bookGetPayload<T>>>>
  /**
   * Create a Book.
   * @param {bookCreateArgs} args - Arguments to create a Book.
   * @example
   * // Create one Book
   * const Book = await prisma.book.create({
   *   data: {
   *     // ... data to create a Book
   *   }
   * })
   * 
  **/
  create<T extends bookCreateArgs>(
    args: Subset<T, bookCreateArgs>
  ): CheckSelect<T, Prisma__bookClient<book>, Prisma__bookClient<bookGetPayload<T>>>
  /**
   * Delete a Book.
   * @param {bookDeleteArgs} args - Arguments to delete one Book.
   * @example
   * // Delete one Book
   * const Book = await prisma.book.delete({
   *   where: {
   *     // ... filter to delete one Book
   *   }
   * })
   * 
  **/
  delete<T extends bookDeleteArgs>(
    args: Subset<T, bookDeleteArgs>
  ): CheckSelect<T, Prisma__bookClient<book>, Prisma__bookClient<bookGetPayload<T>>>
  /**
   * Update one Book.
   * @param {bookUpdateArgs} args - Arguments to update one Book.
   * @example
   * // Update one Book
   * const book = await prisma.book.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends bookUpdateArgs>(
    args: Subset<T, bookUpdateArgs>
  ): CheckSelect<T, Prisma__bookClient<book>, Prisma__bookClient<bookGetPayload<T>>>
  /**
   * Delete zero or more Books.
   * @param {bookDeleteManyArgs} args - Arguments to filter Books to delete.
   * @example
   * // Delete a few Books
   * const { count } = await prisma.book.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends bookDeleteManyArgs>(
    args: Subset<T, bookDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Books.
   * @param {bookUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Books
   * const book = await prisma.book.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends bookUpdateManyArgs>(
    args: Subset<T, bookUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Book.
   * @param {bookUpsertArgs} args - Arguments to update or create a Book.
   * @example
   * // Update or create a Book
   * const book = await prisma.book.upsert({
   *   create: {
   *     // ... data to create a Book
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Book we want to update
   *   }
   * })
  **/
  upsert<T extends bookUpsertArgs>(
    args: Subset<T, bookUpsertArgs>
  ): CheckSelect<T, Prisma__bookClient<book>, Prisma__bookClient<bookGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManybookArgs, 'select' | 'include'>): Promise<number>
}

/**
 * The delegate class that acts as a "Promise-like" for book.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__bookClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  author<T extends authorArgs = {}>(args?: Subset<T, authorArgs>): CheckSelect<T, Prisma__authorClient<author | null>, Prisma__authorClient<authorGetPayload<T> | null>>;

  register<T extends FindManyregisterArgs = {}>(args?: Subset<T, FindManyregisterArgs>): CheckSelect<T, Promise<Array<register>>, Promise<Array<registerGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * book findOne
 */
export type FindOnebookArgs = {
  /**
   * Select specific fields to fetch from the book
  **/
  select?: bookSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: bookInclude | null
  /**
   * Filter, which book to fetch.
  **/
  where: bookWhereUniqueInput
}


/**
 * book findMany
 */
export type FindManybookArgs = {
  /**
   * Select specific fields to fetch from the book
  **/
  select?: bookSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: bookInclude | null
  /**
   * Filter, which books to fetch.
  **/
  where?: bookWhereInput
  /**
   * Determine the order of the books to fetch.
  **/
  orderBy?: bookOrderByInput
  /**
   * Sets the position for listing books.
  **/
  cursor?: bookWhereUniqueInput
  /**
   * The number of books to fetch. If negative number, it will take books before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` books.
  **/
  skip?: number
}


/**
 * book create
 */
export type bookCreateArgs = {
  /**
   * Select specific fields to fetch from the book
  **/
  select?: bookSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: bookInclude | null
  /**
   * The data needed to create a book.
  **/
  data: bookCreateInput
}


/**
 * book update
 */
export type bookUpdateArgs = {
  /**
   * Select specific fields to fetch from the book
  **/
  select?: bookSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: bookInclude | null
  /**
   * The data needed to update a book.
  **/
  data: bookUpdateInput
  /**
   * Choose, which book to update.
  **/
  where: bookWhereUniqueInput
}


/**
 * book updateMany
 */
export type bookUpdateManyArgs = {
  data: bookUpdateManyMutationInput
  where?: bookWhereInput
}


/**
 * book upsert
 */
export type bookUpsertArgs = {
  /**
   * Select specific fields to fetch from the book
  **/
  select?: bookSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: bookInclude | null
  /**
   * The filter to search for the book to update in case it exists.
  **/
  where: bookWhereUniqueInput
  /**
   * In case the book found by the `where` argument doesn't exist, create a new book with this data.
  **/
  create: bookCreateInput
  /**
   * In case the book was found with the provided `where` argument, update it with this data.
  **/
  update: bookUpdateInput
}


/**
 * book delete
 */
export type bookDeleteArgs = {
  /**
   * Select specific fields to fetch from the book
  **/
  select?: bookSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: bookInclude | null
  /**
   * Filter which book to delete.
  **/
  where: bookWhereUniqueInput
}


/**
 * book deleteMany
 */
export type bookDeleteManyArgs = {
  where?: bookWhereInput
}


/**
 * book without action
 */
export type bookArgs = {
  /**
   * Select specific fields to fetch from the book
  **/
  select?: bookSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: bookInclude | null
}



/**
 * Model register
 */

export type register = {
  bookID: string
  id: number
  issued_date: Date | null
  returned_date: Date | null
  return_status: boolean
  roll_number: string
  student_name: string
}

export type registerSelect = {
  bookID?: boolean
  id?: boolean
  issued_date?: boolean
  returned_date?: boolean
  return_status?: boolean
  roll_number?: boolean
  student_name?: boolean
  book?: boolean | bookArgs
}

export type registerInclude = {
  book?: boolean | bookArgs
}

export type registerGetPayload<
  S extends boolean | null | undefined | registerArgs,
  U = keyof S
> = S extends true
  ? register
  : S extends undefined
  ? never
  : S extends registerArgs | FindManyregisterArgs
  ? 'include' extends U
    ? register  & {
      [P in TrueKeys<S['include']>]:
      P extends 'book'
      ? bookGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof register ? register[P]
: 
      P extends 'book'
      ? bookGetPayload<S['select'][P]> : never
    }
  : register
: register


export interface registerDelegate {
  /**
   * Find zero or one Register.
   * @param {FindOneregisterArgs} args - Arguments to find a Register
   * @example
   * // Get one Register
   * const register = await prisma.register.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneregisterArgs>(
    args: Subset<T, FindOneregisterArgs>
  ): CheckSelect<T, Prisma__registerClient<register | null>, Prisma__registerClient<registerGetPayload<T> | null>>
  /**
   * Find zero or more Registers.
   * @param {FindManyregisterArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Registers
   * const registers = await prisma.register.findMany()
   * 
   * // Get first 10 Registers
   * const registers = await prisma.register.findMany({ take: 10 })
   * 
   * // Only select the `bookID`
   * const registerWithBookIDOnly = await prisma.register.findMany({ select: { bookID: true } })
   * 
  **/
  findMany<T extends FindManyregisterArgs>(
    args?: Subset<T, FindManyregisterArgs>
  ): CheckSelect<T, Promise<Array<register>>, Promise<Array<registerGetPayload<T>>>>
  /**
   * Create a Register.
   * @param {registerCreateArgs} args - Arguments to create a Register.
   * @example
   * // Create one Register
   * const Register = await prisma.register.create({
   *   data: {
   *     // ... data to create a Register
   *   }
   * })
   * 
  **/
  create<T extends registerCreateArgs>(
    args: Subset<T, registerCreateArgs>
  ): CheckSelect<T, Prisma__registerClient<register>, Prisma__registerClient<registerGetPayload<T>>>
  /**
   * Delete a Register.
   * @param {registerDeleteArgs} args - Arguments to delete one Register.
   * @example
   * // Delete one Register
   * const Register = await prisma.register.delete({
   *   where: {
   *     // ... filter to delete one Register
   *   }
   * })
   * 
  **/
  delete<T extends registerDeleteArgs>(
    args: Subset<T, registerDeleteArgs>
  ): CheckSelect<T, Prisma__registerClient<register>, Prisma__registerClient<registerGetPayload<T>>>
  /**
   * Update one Register.
   * @param {registerUpdateArgs} args - Arguments to update one Register.
   * @example
   * // Update one Register
   * const register = await prisma.register.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends registerUpdateArgs>(
    args: Subset<T, registerUpdateArgs>
  ): CheckSelect<T, Prisma__registerClient<register>, Prisma__registerClient<registerGetPayload<T>>>
  /**
   * Delete zero or more Registers.
   * @param {registerDeleteManyArgs} args - Arguments to filter Registers to delete.
   * @example
   * // Delete a few Registers
   * const { count } = await prisma.register.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends registerDeleteManyArgs>(
    args: Subset<T, registerDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Registers.
   * @param {registerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Registers
   * const register = await prisma.register.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends registerUpdateManyArgs>(
    args: Subset<T, registerUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Register.
   * @param {registerUpsertArgs} args - Arguments to update or create a Register.
   * @example
   * // Update or create a Register
   * const register = await prisma.register.upsert({
   *   create: {
   *     // ... data to create a Register
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Register we want to update
   *   }
   * })
  **/
  upsert<T extends registerUpsertArgs>(
    args: Subset<T, registerUpsertArgs>
  ): CheckSelect<T, Prisma__registerClient<register>, Prisma__registerClient<registerGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManyregisterArgs, 'select' | 'include'>): Promise<number>
}

/**
 * The delegate class that acts as a "Promise-like" for register.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__registerClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  book<T extends bookArgs = {}>(args?: Subset<T, bookArgs>): CheckSelect<T, Prisma__bookClient<book | null>, Prisma__bookClient<bookGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * register findOne
 */
export type FindOneregisterArgs = {
  /**
   * Select specific fields to fetch from the register
  **/
  select?: registerSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: registerInclude | null
  /**
   * Filter, which register to fetch.
  **/
  where: registerWhereUniqueInput
}


/**
 * register findMany
 */
export type FindManyregisterArgs = {
  /**
   * Select specific fields to fetch from the register
  **/
  select?: registerSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: registerInclude | null
  /**
   * Filter, which registers to fetch.
  **/
  where?: registerWhereInput
  /**
   * Determine the order of the registers to fetch.
  **/
  orderBy?: registerOrderByInput
  /**
   * Sets the position for listing registers.
  **/
  cursor?: registerWhereUniqueInput
  /**
   * The number of registers to fetch. If negative number, it will take registers before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` registers.
  **/
  skip?: number
}


/**
 * register create
 */
export type registerCreateArgs = {
  /**
   * Select specific fields to fetch from the register
  **/
  select?: registerSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: registerInclude | null
  /**
   * The data needed to create a register.
  **/
  data: registerCreateInput
}


/**
 * register update
 */
export type registerUpdateArgs = {
  /**
   * Select specific fields to fetch from the register
  **/
  select?: registerSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: registerInclude | null
  /**
   * The data needed to update a register.
  **/
  data: registerUpdateInput
  /**
   * Choose, which register to update.
  **/
  where: registerWhereUniqueInput
}


/**
 * register updateMany
 */
export type registerUpdateManyArgs = {
  data: registerUpdateManyMutationInput
  where?: registerWhereInput
}


/**
 * register upsert
 */
export type registerUpsertArgs = {
  /**
   * Select specific fields to fetch from the register
  **/
  select?: registerSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: registerInclude | null
  /**
   * The filter to search for the register to update in case it exists.
  **/
  where: registerWhereUniqueInput
  /**
   * In case the register found by the `where` argument doesn't exist, create a new register with this data.
  **/
  create: registerCreateInput
  /**
   * In case the register was found with the provided `where` argument, update it with this data.
  **/
  update: registerUpdateInput
}


/**
 * register delete
 */
export type registerDeleteArgs = {
  /**
   * Select specific fields to fetch from the register
  **/
  select?: registerSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: registerInclude | null
  /**
   * Filter which register to delete.
  **/
  where: registerWhereUniqueInput
}


/**
 * register deleteMany
 */
export type registerDeleteManyArgs = {
  where?: registerWhereInput
}


/**
 * register without action
 */
export type registerArgs = {
  /**
   * Select specific fields to fetch from the register
  **/
  select?: registerSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: registerInclude | null
}



/**
 * Deep Input Types
 */


export type registerWhereInput = {
  bookID?: string | StringFilter
  id?: number | IntFilter
  issued_date?: Date | string | NullableDateTimeFilter | null
  returned_date?: Date | string | NullableDateTimeFilter | null
  return_status?: boolean | BooleanFilter
  roll_number?: string | StringFilter
  student_name?: string | StringFilter
  AND?: Enumerable<registerWhereInput>
  OR?: Array<registerWhereInput>
  NOT?: Enumerable<registerWhereInput>
  book?: bookWhereInput | null
}

export type bookWhereInput = {
  authorid?: number | IntFilter
  bookid?: string | StringFilter
  genre?: string | StringFilter
  id?: number | IntFilter
  isbn?: string | StringFilter
  language?: string | StringFilter
  name?: string | StringFilter
  publisher?: string | StringFilter
  status?: book_status | book_statusFilter
  year?: string | StringFilter
  register?: registerFilter | null
  AND?: Enumerable<bookWhereInput>
  OR?: Array<bookWhereInput>
  NOT?: Enumerable<bookWhereInput>
  author?: authorWhereInput | null
}

export type authorWhereInput = {
  id?: number | IntFilter
  lastname?: string | NullableStringFilter | null
  name?: string | NullableStringFilter | null
  book?: bookFilter | null
  AND?: Enumerable<authorWhereInput>
  OR?: Array<authorWhereInput>
  NOT?: Enumerable<authorWhereInput>
}

export type authorWhereUniqueInput = {
  id?: number
}

export type bookWhereUniqueInput = {
  authorid?: number
  bookid?: string
  id?: number
}

export type registerWhereUniqueInput = {
  bookID?: string
  id?: number
}

export type registerCreateWithoutBookInput = {
  issued_date?: Date | string | null
  returned_date?: Date | string | null
  return_status?: boolean
  roll_number: string
  student_name: string
}

export type registerCreateManyWithoutBookInput = {
  create?: Enumerable<registerCreateWithoutBookInput>
  connect?: Enumerable<registerWhereUniqueInput>
}

export type bookCreateWithoutAuthorInput = {
  bookid: string
  genre: string
  isbn: string
  language: string
  name: string
  publisher: string
  status?: book_status
  year: string
  register?: registerCreateManyWithoutBookInput | null
}

export type bookCreateManyWithoutAuthorInput = {
  create?: Enumerable<bookCreateWithoutAuthorInput>
  connect?: Enumerable<bookWhereUniqueInput>
}

export type authorCreateInput = {
  lastname?: string | null
  name?: string | null
  book?: bookCreateManyWithoutAuthorInput | null
}

export type registerUpdateWithoutBookDataInput = {
  id?: number
  issued_date?: Date | string | null
  returned_date?: Date | string | null
  return_status?: boolean
  roll_number?: string
  student_name?: string
}

export type registerUpdateWithWhereUniqueWithoutBookInput = {
  where: registerWhereUniqueInput
  data: registerUpdateWithoutBookDataInput
}

export type registerScalarWhereInput = {
  bookID?: string | StringFilter
  id?: number | IntFilter
  issued_date?: Date | string | NullableDateTimeFilter | null
  returned_date?: Date | string | NullableDateTimeFilter | null
  return_status?: boolean | BooleanFilter
  roll_number?: string | StringFilter
  student_name?: string | StringFilter
  AND?: Enumerable<registerScalarWhereInput>
  OR?: Array<registerScalarWhereInput>
  NOT?: Enumerable<registerScalarWhereInput>
}

export type registerUpdateManyDataInput = {
  id?: number
  issued_date?: Date | string | null
  returned_date?: Date | string | null
  return_status?: boolean
  roll_number?: string
  student_name?: string
}

export type registerUpdateManyWithWhereNestedInput = {
  where: registerScalarWhereInput
  data: registerUpdateManyDataInput
}

export type registerUpsertWithWhereUniqueWithoutBookInput = {
  where: registerWhereUniqueInput
  update: registerUpdateWithoutBookDataInput
  create: registerCreateWithoutBookInput
}

export type registerUpdateManyWithoutBookInput = {
  create?: Enumerable<registerCreateWithoutBookInput>
  connect?: Enumerable<registerWhereUniqueInput>
  set?: Enumerable<registerWhereUniqueInput>
  disconnect?: Enumerable<registerWhereUniqueInput>
  delete?: Enumerable<registerWhereUniqueInput>
  update?: Enumerable<registerUpdateWithWhereUniqueWithoutBookInput>
  updateMany?: Enumerable<registerUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<registerScalarWhereInput>
  upsert?: Enumerable<registerUpsertWithWhereUniqueWithoutBookInput>
}

export type bookUpdateWithoutAuthorDataInput = {
  bookid?: string
  genre?: string
  id?: number
  isbn?: string
  language?: string
  name?: string
  publisher?: string
  status?: book_status
  year?: string
  register?: registerUpdateManyWithoutBookInput
}

export type bookUpdateWithWhereUniqueWithoutAuthorInput = {
  where: bookWhereUniqueInput
  data: bookUpdateWithoutAuthorDataInput
}

export type bookScalarWhereInput = {
  authorid?: number | IntFilter
  bookid?: string | StringFilter
  genre?: string | StringFilter
  id?: number | IntFilter
  isbn?: string | StringFilter
  language?: string | StringFilter
  name?: string | StringFilter
  publisher?: string | StringFilter
  status?: book_status | book_statusFilter
  year?: string | StringFilter
  register?: registerFilter | null
  AND?: Enumerable<bookScalarWhereInput>
  OR?: Array<bookScalarWhereInput>
  NOT?: Enumerable<bookScalarWhereInput>
}

export type bookUpdateManyDataInput = {
  bookid?: string
  genre?: string
  id?: number
  isbn?: string
  language?: string
  name?: string
  publisher?: string
  status?: book_status
  year?: string
}

export type bookUpdateManyWithWhereNestedInput = {
  where: bookScalarWhereInput
  data: bookUpdateManyDataInput
}

export type bookUpsertWithWhereUniqueWithoutAuthorInput = {
  where: bookWhereUniqueInput
  update: bookUpdateWithoutAuthorDataInput
  create: bookCreateWithoutAuthorInput
}

export type bookUpdateManyWithoutAuthorInput = {
  create?: Enumerable<bookCreateWithoutAuthorInput>
  connect?: Enumerable<bookWhereUniqueInput>
  set?: Enumerable<bookWhereUniqueInput>
  disconnect?: Enumerable<bookWhereUniqueInput>
  delete?: Enumerable<bookWhereUniqueInput>
  update?: Enumerable<bookUpdateWithWhereUniqueWithoutAuthorInput>
  updateMany?: Enumerable<bookUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<bookScalarWhereInput>
  upsert?: Enumerable<bookUpsertWithWhereUniqueWithoutAuthorInput>
}

export type authorUpdateInput = {
  id?: number
  lastname?: string | null
  name?: string | null
  book?: bookUpdateManyWithoutAuthorInput
}

export type authorUpdateManyMutationInput = {
  id?: number
  lastname?: string | null
  name?: string | null
}

export type authorCreateWithoutBookInput = {
  lastname?: string | null
  name?: string | null
}

export type authorCreateOneWithoutBookInput = {
  create?: authorCreateWithoutBookInput
  connect?: authorWhereUniqueInput
}

export type bookCreateInput = {
  bookid: string
  genre: string
  isbn: string
  language: string
  name: string
  publisher: string
  status?: book_status
  year: string
  author: authorCreateOneWithoutBookInput
  register?: registerCreateManyWithoutBookInput | null
}

export type authorUpdateWithoutBookDataInput = {
  id?: number
  lastname?: string | null
  name?: string | null
}

export type authorUpsertWithoutBookInput = {
  update: authorUpdateWithoutBookDataInput
  create: authorCreateWithoutBookInput
}

export type authorUpdateOneRequiredWithoutBookInput = {
  create?: authorCreateWithoutBookInput
  connect?: authorWhereUniqueInput
  update?: authorUpdateWithoutBookDataInput
  upsert?: authorUpsertWithoutBookInput
}

export type bookUpdateInput = {
  bookid?: string
  genre?: string
  id?: number
  isbn?: string
  language?: string
  name?: string
  publisher?: string
  status?: book_status
  year?: string
  author?: authorUpdateOneRequiredWithoutBookInput
  register?: registerUpdateManyWithoutBookInput
}

export type bookUpdateManyMutationInput = {
  bookid?: string
  genre?: string
  id?: number
  isbn?: string
  language?: string
  name?: string
  publisher?: string
  status?: book_status
  year?: string
}

export type bookCreateWithoutRegisterInput = {
  bookid: string
  genre: string
  isbn: string
  language: string
  name: string
  publisher: string
  status?: book_status
  year: string
  author: authorCreateOneWithoutBookInput
}

export type bookCreateOneWithoutRegisterInput = {
  create?: bookCreateWithoutRegisterInput
  connect?: bookWhereUniqueInput
}

export type registerCreateInput = {
  issued_date?: Date | string | null
  returned_date?: Date | string | null
  return_status?: boolean
  roll_number: string
  student_name: string
  book: bookCreateOneWithoutRegisterInput
}

export type bookUpdateWithoutRegisterDataInput = {
  bookid?: string
  genre?: string
  id?: number
  isbn?: string
  language?: string
  name?: string
  publisher?: string
  status?: book_status
  year?: string
  author?: authorUpdateOneRequiredWithoutBookInput
}

export type bookUpsertWithoutRegisterInput = {
  update: bookUpdateWithoutRegisterDataInput
  create: bookCreateWithoutRegisterInput
}

export type bookUpdateOneRequiredWithoutRegisterInput = {
  create?: bookCreateWithoutRegisterInput
  connect?: bookWhereUniqueInput
  update?: bookUpdateWithoutRegisterDataInput
  upsert?: bookUpsertWithoutRegisterInput
}

export type registerUpdateInput = {
  id?: number
  issued_date?: Date | string | null
  returned_date?: Date | string | null
  return_status?: boolean
  roll_number?: string
  student_name?: string
  book?: bookUpdateOneRequiredWithoutRegisterInput
}

export type registerUpdateManyMutationInput = {
  id?: number
  issued_date?: Date | string | null
  returned_date?: Date | string | null
  return_status?: boolean
  roll_number?: string
  student_name?: string
}

export type StringFilter = {
  equals?: string
  not?: string | StringFilter
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
}

export type IntFilter = {
  equals?: number
  not?: number | IntFilter
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
}

export type NullableDateTimeFilter = {
  equals?: Date | string | null
  not?: Date | string | null | NullableDateTimeFilter
  in?: Enumerable<Date | string> | null
  notIn?: Enumerable<Date | string> | null
  lt?: Date | string | null
  lte?: Date | string | null
  gt?: Date | string | null
  gte?: Date | string | null
}

export type BooleanFilter = {
  equals?: boolean
  not?: boolean | BooleanFilter
}

export type book_statusFilter = {
  equals?: book_status
  not?: book_status | book_statusFilter
  in?: Enumerable<book_status>
  notIn?: Enumerable<book_status>
}

export type registerFilter = {
  every?: registerWhereInput
  some?: registerWhereInput
  none?: registerWhereInput
}

export type NullableStringFilter = {
  equals?: string | null
  not?: string | null | NullableStringFilter
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
}

export type bookFilter = {
  every?: bookWhereInput
  some?: bookWhereInput
  none?: bookWhereInput
}

export type authorOrderByInput = {
  id?: OrderByArg | null
  lastname?: OrderByArg | null
  name?: OrderByArg | null
}

export type bookOrderByInput = {
  authorid?: OrderByArg | null
  bookid?: OrderByArg | null
  genre?: OrderByArg | null
  id?: OrderByArg | null
  isbn?: OrderByArg | null
  language?: OrderByArg | null
  name?: OrderByArg | null
  publisher?: OrderByArg | null
  status?: OrderByArg | null
  year?: OrderByArg | null
}

export type registerOrderByInput = {
  bookID?: OrderByArg | null
  id?: OrderByArg | null
  issued_date?: OrderByArg | null
  returned_date?: OrderByArg | null
  return_status?: OrderByArg | null
  roll_number?: OrderByArg | null
  student_name?: OrderByArg | null
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
